package com.kh.chap05.method.run;

public class OverloadingTest {
	/*
	 * 메소드 오버로딩
	 * - 한 클래스 내에 "같은" 메소드명으로 정의할 수 있는 방법.
	 * - 매개변수의 자료형의 개수, 순서가 다르게 작성하면 된다.
	 * - 단, 매개변수명, 접근제한자, 반환형은 메소드 오버로딩에 "전혀" 영향을 주지 않는다.
	 */
	
	public void tset() {
		
	}
	public void test(int a) {
		
	}
	public void test(int a, int b) {
		
	}
	
	//에러발생.
	// - 매개변수과는 상관없이 자료형의 갯수와 순서가 같아서 에러가 발생함.
	// - 즉, 매개변수의 자료형의 개수나 순서가 다르게 작성되어야 한다.
//	public void test(int c, int d){
//		
//	}
	
	public void test(int a, int b, String s) {
		
		
	}
	/*
	 * 에러발생
	 * - 반환형이 다르다고 오버로딩이 적용되지 않음.
	 * - 메소드를 호출하는 시점에 매개변수가 동일하기 때문에 에러가 발생한다.
	 * - 즉, 반환형과 상관없이 매개변수의 자료형의 개수와 순서가 다르게 작성되어야 한다.
	 */
//	public void test(int a, int b, String s) {
//		
//		return a+b;
//	}
	
	/*
	 * 에러가 발생함
	 * - 접근제한자가 다르다고 오버로딩이 적용되지 않는다.
	 * - 즉, 접근제한자와 상관없이 매개변수의 자료형의 개수와 순서가 다르게 적상되어야 한다.
	 */
	
//	private void test(int a, int b, String s) {
//		
//	}
	/*
	 * 1. 문제해결 시나리오
	 * 2. 서술형 - 변수의 명명규칙?
	 * 	1. 영어 대소문자는 구분된다.
	 * 	2. 길이에 제한이 없다.
	 * 	3. 숫자로 시작하면 안된다.
	 * 	4. 특수문자는 $, _ 만 쓸 수 있다.
	 * 
	 * 기본 자료형의 종류
	 * 기본 자료형과 참조 자료형의 차이점 : 기본 자료형은 stack 영역에서 값 자체가 그대로 참조 자료형은 heap영역에서 생성된 값을 stack에 주소로 지정된다.
	 * 변수란 무엇인가 : 메모리에 값을 기록하기 위한 공간
	 * 상수란 무엇인가 : 특징 final 키워드와 변수명이 대문자이고 값은 바꿀수가 없다.
	 * 
	 * 증감연산자
	 * 
	 */
}
